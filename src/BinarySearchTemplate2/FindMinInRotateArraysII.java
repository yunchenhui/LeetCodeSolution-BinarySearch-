package BinarySearchTemplate2;
//寻找旋转排序数组中的最小值 II
//假设按照升序排序的数组在预先未知的某个点上进行了旋转。
//
//( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
//
//请找出其中最小的元素。
//
//注意数组中可能存在重复的元素。
//
//示例 1：
//
//输入: [1,3,5]
//输出: 1
//示例 2：
//
//输入: [2,2,2,0,1]
//输出: 0
//说明：
//
//这道题是 寻找旋转排序数组中的最小值 的延伸题目。
//允许重复会影响算法的时间复杂度吗？会如何影响，为什么？
//思路:只有当mid 和 right的值相同的时候才无法确定 最小值在哪个区间，无法确定的时候让right的值 自减就好，因为right的一定是大于等于最小值的
public class FindMinInRotateArraysII {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
class FindMinInRotateArraysIISolution{
	public int findMin(int[] nums) {
        if(nums.length==1)
            return nums[0];
        int left=0;
        int right=nums.length-1;
        while(left<right){
            int mid=left+(right-left)/2;
            if(nums[mid]>nums[right])
                left=mid+1;
            else if(nums[mid]<nums[right])
                right=mid;
            else
                right--;
        }
        return nums[left];
	}
}